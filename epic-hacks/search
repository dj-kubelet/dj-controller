#!/bin/bash
set -euo pipefail

NAMESPACE=spotify-matti4s
ACCESS_TOKEN=$(kubectl --namespace="$NAMESPACE" get secrets spotify-oauth -ojsonpath='{.data.accesstoken}' | base64 --decode)
DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"

main() {
    scriptname="$(basename "$0")"
    case $scriptname in
    search)
        queue_search "$@"
        ;;
    playlist)
        queue_playlist "$@"
        ;;
    *)
        echo "unknown scriptname"
        exit 1
        ;;
    esac
}

normalize_str() {
    # Create a Kubernetes friendly name of the track search input
    S=${1// /-}                                 # remove spaces from $1
    S=${S//:/-}                                 # replace : with -
    S=$(echo "$S" | tr "[:upper:]" "[:lower:]") # lowercase
    S=$(echo "$S" | LANG=c tr -cd '[:print:]')  # remove non ascii characters
    S=$(echo "$S" | cut -c-253)                 # trim to max 253 characters
    echo "$S"
}

sp_curl() {
    #echo '[DEBUG] curl -s -H "Authorization: Bearer XXX_REDACTED_XXX"' "$@" 1>&2
    curl -s -H "Authorization: Bearer $ACCESS_TOKEN" "$@"
}

queue_uri() {
    local uri=$1
    name="${uri/spotify:track:/}"
    name="$(normalize_str "$name")"
    echo "$uri" "$name"
    URI="$uri" NAME="$name" envsubst <"$DIR/track.tmpl.yaml" |
        kubectl --namespace="$NAMESPACE" create -f -
}

queue_playlist() {
    # Remove "spotify:playlist:" from the input if present
    playlist_id=${1/spotify:playlist:/}
    sp_curl "https://api.spotify.com/v1/playlists/$playlist_id/tracks" |
        jq -r '.items[].track.uri' |
        while read -r uri; do
            queue_uri "$uri"
        done
}

search() {
    sp_curl -G "https://api.spotify.com/v1/search" \
        -d "type=track" \
        --data-urlencode "q=$*" |
        jq -r '.tracks.items[] | {uri: .uri, name: .name, artists: ([.artists[].name] | join(", "))} | "\(.uri)\t\(.name)\t\t\(.artists)"'
}

queue_search() {
    queue_uri "$(search "$@" | fzf | cut -f1)"
}

main "$@"
